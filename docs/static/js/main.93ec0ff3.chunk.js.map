{
  "version": 3,
  "sources": [
    "components/BoardCell.jsx",
    "components/TicTacToe.jsx",
    "App.js",
    "serviceWorker.js",
    "index.js"
  ],
  "names": [
    "BoardCell",
    "value",
    "this",
    "props",
    "className",
    "onClick",
    "icon",
    "prefix",
    "iconName",
    "React",
    "Component",
    "TicTacToe",
    "renderBoardCell",
    "bind",
    "state",
    "positioning",
    "Array",
    "fill",
    "isXNext",
    "handleClick",
    "reset",
    "i",
    "slice",
    "calculateWinner",
    "setState",
    "currentState",
    "v",
    "isGameEnd",
    "status",
    "winner",
    "toUpperCase",
    "pos",
    "lines",
    "length",
    "a",
    "b",
    "c",
    "library",
    "add",
    "faCircle",
    "faTimes",
    "console",
    "log",
    "App",
    "id",
    "Boolean",
    "window",
    "location",
    "hostname",
    "match",
    "ReactDOM",
    "render",
    "document",
    "getElementById",
    "navigator",
    "serviceWorker",
    "ready",
    "then",
    "registration",
    "unregister",
    "catch",
    "error",
    "message"
  ],
  "mappings": "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",
  "file": "static/js/main.93ec0ff3.chunk.js",
  "sourcesContent": [
    "import React from \"react\";\r\nimport {FontAwesomeIcon} from \"@fortawesome/react-fontawesome\";\r\n\r\nexport class BoardCell extends React.Component {\r\n\r\n    render() {\r\n        const value = this.props.value;\r\n        return (\r\n            <td className=\"board-cell\">\r\n                <button onClick={this.props.onClick} className=\"board-cell__button\">\r\n                    <FontAwesomeIcon icon={{\r\n                        prefix: value === \"x\" ? \"fas\" : value === \"o\" ? \"far\" : null,\r\n                        iconName: value === \"x\" ? \"times\" : value === \"o\" ? \"circle\" : null\r\n                    }}/>\r\n                </button>\r\n            </td>\r\n        );\r\n    }\r\n\r\n}",
    "import React from \"react\";\r\nimport {BoardCell} from \"./BoardCell\";\r\nimport \"../styles/tic-tac-toe.css\";\r\n\r\nexport class TicTacToe extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.renderBoardCell = this.renderBoardCell.bind(this);\r\n        this.state = {\r\n            positioning: Array(9).fill(null),\r\n            isXNext: false\r\n        };\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.reset = this.reset.bind(this);\r\n    }\r\n\r\n    handleClick(i) {\r\n        const positioning = this.state.positioning.slice();\r\n        if (positioning[i] || calculateWinner(positioning)) return;\r\n        positioning[i] = this.state.isXNext ? \"x\" : \"o\";\r\n        this.setState(currentState => ({\r\n            positioning: positioning,\r\n            isXNext: !currentState.isXNext\r\n        }));\r\n    }\r\n\r\n    renderBoardCell(v) {\r\n        return (\r\n            <BoardCell\r\n                onClick={() => this.handleClick(v)}\r\n                value={this.state.positioning[v]}\r\n            />\r\n        );\r\n    }\r\n\r\n    reset() {\r\n        this.setState({\r\n            positioning: Array(9).fill(null),\r\n            isGameEnd: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        const winner = calculateWinner(this.state.positioning);\r\n        let status;\r\n        if (winner) {\r\n            status = \"The \" + winner.toUpperCase() + \" is winner!\";\r\n        } else {\r\n            status = (\r\n                <span>The next player is {this.state.isXNext ? \"X\" : \"O\"}</span>\r\n            );\r\n        }\r\n        return (\r\n            <>\r\n                <div className=\"box\">\r\n                    <table className=\"board\">\r\n                        <tbody>\r\n                        <tr className=\"firstRow\">\r\n                            {this.renderBoardCell(0)}\r\n                            {this.renderBoardCell(1)}\r\n                            {this.renderBoardCell(2)}\r\n                        </tr>\r\n                        <tr className=\"secondRow\">\r\n                            {this.renderBoardCell(3)}\r\n                            {this.renderBoardCell(4)}\r\n                            {this.renderBoardCell(5)}\r\n                        </tr>\r\n                        <tr className=\"thirdRow\">\r\n                            {this.renderBoardCell(6)}\r\n                            {this.renderBoardCell(7)}\r\n                            {this.renderBoardCell(8)}\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n                <div className=\"box\">{status}</div>\r\n\r\n                <div className=\"box\">\r\n                    <button\r\n                        className=\"button is-outlined is-warning\"\r\n                        onClick={this.reset}\r\n                    >\r\n                        Play again!\r\n                    </button>\r\n                </div>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nfunction calculateWinner(pos) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n\r\n    for (let i = 0; i < lines.length; i += 1) {\r\n        const [a, b, c] = lines[i];\r\n        if (pos[a] && pos[a] === pos[b] && pos[a] === pos[c]) {\r\n            return pos[a];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n",
    "import React from 'react';\nimport {library} from \"@fortawesome/fontawesome-svg-core\";\nimport {faTimes} from \"@fortawesome/free-solid-svg-icons\";\nimport {faCircle} from \"@fortawesome/free-regular-svg-icons\";\nimport {TicTacToe} from \"./components/TicTacToe\";\n\nlibrary.add(faCircle, faTimes);\n\nconsole.log(library);\n\nexport default class App extends React.Component {\n\n    render() {\n        return (\n            <div id=\"app\">\n                <TicTacToe/>\n            </div>\n        );\n    }\n\n}",
    "// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'}\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}\n",
    "import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"
  ],
  "sourceRoot": ""
}